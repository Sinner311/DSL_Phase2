generator clinet {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model days {
  dateid          Int               @id @default(autoincrement())
  roundid         Int?
  status          String?           @db.VarChar(20)
  maxuser         Int?
  date            DateTime?         @db.Date
  starttime       DateTime?         @db.Time(0)
  endtime         DateTime?         @db.Time(0)
  rounds          rounds?           @relation(fields: [roundid], references: [roundid], onDelete: Restrict, onUpdate: Restrict, map: "days_ibfk_1")
  history_booking history_booking[]

  @@index([roundid], map: "roundid")
}

model history_booking {
  historyid     Int       @id @default(autoincrement())
  datetime      DateTime? @db.DateTime(0)
  studentid     Int?
  bookingdateid Int?
  status        String?   @db.VarChar(20)
  type          Int?      @db.TinyInt
  users         users?    @relation(fields: [studentid], references: [studentid], onDelete: Restrict, onUpdate: Restrict, map: "history_booking_ibfk_1")
  days          days?     @relation(fields: [bookingdateid], references: [dateid], onDelete: Restrict, onUpdate: Restrict, map: "history_booking_ibfk_2")

  @@index([bookingdateid], map: "bookingdateid")
  @@index([studentid], map: "studentid")
}

model history_queue {
  historyid Int       @id @default(autoincrement())
  datetime  DateTime? @db.DateTime(0)
  studentid Int?
  queueid   Int?
  type      Int?      @db.TinyInt
  channel   String?   @db.VarChar(20)
  status    String?   @db.VarChar(20)
  star_rate Boolean?
  q1        Boolean?
  q2        Boolean?
  q3        Boolean?
  q4        Boolean?
  q5        Boolean?
  users     users?    @relation(fields: [studentid], references: [studentid], onDelete: Restrict, onUpdate: Restrict, map: "history_queue_ibfk_1")
  queues    queues?   @relation(fields: [queueid], references: [queueid], onDelete: Restrict, onUpdate: Restrict, map: "history_queue_ibfk_2")

  @@index([queueid], map: "queueid")
  @@index([studentid], map: "studentid")
}

model list_of_round {
  Listid                             Int       @id @default(autoincrement())
  Document_Amendment_Submission_Date DateTime? @db.Date
  year                               Int?      @db.Year
  semester                           String?   @db.VarChar(10)
  rounds                             rounds[]
}

model queues {
  queueid       Int             @id @default(autoincrement())
  time          DateTime?       @db.Time(0)
  studentID     Int?
  type          Int?            @db.TinyInt
  channel       String?         @db.VarChar(20)
  status        String?         @db.VarChar(20)
  history_queue history_queue[]
}

model rounds {
  roundid       Int            @id @default(autoincrement())
  startdate     DateTime?      @db.Date
  enddate       DateTime?      @db.Date
  Listid        Int?
  roundnumber   Int?
  type          Int?           @db.TinyInt
  status        String?        @db.VarChar(20)
  days          days[]
  list_of_round list_of_round? @relation(fields: [Listid], references: [Listid], onDelete: Restrict, onUpdate: Restrict, map: "rounds_ibfk_1")

  @@index([Listid], map: "Listid")
}

model users {
  id              Int               @id @default(autoincrement())
  email           String            @unique(map: "email") @db.VarChar(100)
  studentid       Int?              @unique(map: "studentid")
  name            String?           @db.VarChar(100)
  role            String?           @db.VarChar(20)
  channel         String?           @db.VarChar(20)
  history_booking history_booking[]
  history_queue   history_queue[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model web_settings {
  web_status Int
  show_list  String? @db.Text

  @@ignore
}
